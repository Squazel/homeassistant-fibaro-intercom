[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "fibaro-intercom"
version = "1.0.0"
description = "Home Assistant integration for FIBARO Intercom"
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.13"
dependencies = [
    "websockets>=11.0",  # Core requirement (matches manifest.json)
]

[project.optional-dependencies]
dev = [
    # Testing framework
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.10.0",
    "pytest-cov>=4.0.0",
    # Code quality tools
    "ruff>=0.1.0",  # Fast linter + formatter (replaces flake8 + isort + black)
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",
    # Additional runtime deps useful for development/testing
    "aiohttp>=3.8.0",
    "yarl>=1.8.0",
]

# Centralized tool configuration
[tool.ruff]
line-length = 88
target-version = "py313"
src = ["custom_components", "tests"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint]
# Enable critical error detection plus common code quality checks
select = [
    "E9",   # syntax errors
    "F63",  # duplicate argument in function call
    "F7",   # syntax error in forward annotation
    "F82",  # undefined name
    "F401", # imported but unused
    "F841", # local variable is assigned to but never used
]
ignore = [
    "E203", # whitespace before ':'
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # imported but unused
"tests/*" = ["S101"]      # use of assert

[tool.ruff.lint.isort]
known-first-party = ["custom_components.fibaro_intercom"]
known-third-party = ["homeassistant", "aiohttp", "websockets", "yarl"]

[tool.setuptools_scm]
write_to = "custom_components/fibaro_intercom/_version.py"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=.",
    "--cov-report=term-missing",
    "--cov-report=xml:tests/coverage.xml",
    "--cov-report=html:tests/htmlcov",
    "--cov-fail-under=50",  # TODO: review/increase
]
asyncio_mode = "auto"
markers = [
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["."]
include = ["custom_components/fibaro_intercom/*"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/.*",
    "custom_components/fibaro_intercom/_version.py",
    "hass-dev.py",  # CLI wrapper - not part of core functionality
    "tools/*",  # Development & Testing code - not part of core functionality
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.xml]
output = "tests/coverage.xml"

[tool.coverage.html]
directory = "tests/htmlcov"

[tool.mypy]
python_version = "3.13"
show_error_codes = true
strict = false
warn_return_any = false  # Home Assistant uses a lot of Any types
warn_unused_configs = true
warn_unused_ignores = true
check_untyped_defs = true
disallow_incomplete_defs = false  # Allow incomplete defs for Home Assistant compatibility
disallow_untyped_defs = false
disallow_any_generics = false  # Home Assistant uses generic types
no_implicit_optional = true
warn_redundant_casts = true

[[tool.mypy.overrides]]
module = [
    "homeassistant.*",
    "pytest.*",
    "voluptuous.*",  # Home Assistant config validation
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "custom_components.fibaro_intercom.*"
# Relax checks for integration code since it uses Home Assistant patterns
disallow_any_unimported = false
disallow_any_expr = false
disallow_any_decorated = false
disallow_any_explicit = false
disallow_any_generics = false
